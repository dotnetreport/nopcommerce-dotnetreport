/// .Net Report Builder view model v3.1.0
/// License has to be purchased for use
/// 2015-2018 (c) www.dotnetreport.com
function pagerViewModel(e) { e = e || {}; var r = this; r.pageSize = ko.observable(e.pageSize || 30), r.pages = ko.observable(e.pages || 1), r.currentPage = ko.observable(e.currentPage || 1), r.pauseNavigation = ko.observable(!1), r.totalRecords = ko.observable(0), r.sortColumn = ko.observable(), r.sortDescending = ko.observable(), r.isFirstPage = ko.computed(function () { return 1 == this.currentPage() }, r), r.isLastPage = ko.computed(function () { return this.currentPage() == this.pages() }, r), r.currentPage.subscribe(function (e) { e > r.pages() && r.currentPage(0 == r.pages() ? 1 : r.pages()), e < 1 && r.currentPage(1) }), r.previous = function () { r.pauseNavigation() || r.isFirstPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) - 1) }, r.next = function () { r.pauseNavigation() || r.isLastPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) + 1) }, r.first = function () { r.pauseNavigation() || r.currentPage(1) }, r.last = function () { r.pauseNavigation() || r.currentPage(r.pages()) }, r.changeSort = function (e) { r.sortColumn() == e ? r.sortDescending(!r.sortDescending()) : r.sortDescending(!1), r.sortColumn(e), 1 != r.currentPage() && r.currentPage(1) } } function formulaFieldViewModel(e) { e = e || {}; this.fieldId = ko.observable(e.fieldId), this.isParenthesesStart = ko.observable(e.isParenthesesStart), this.isParenthesesEnd = ko.observable(e.isParenthesesEnd), this.formulaOperation = ko.observable(e.formulaOperation), this.isConstantValue = ko.observable(!!e.constantValue), this.constantValue = ko.observable(e.constantValue) } function scheduleBuilder() { var e = this; e.options = ["day", "week", "month", "year"], e.showAtTime = ko.observable(!0), e.showDays = ko.observable(!1), e.showMonths = ko.observable(!1), e.showDates = ko.observable(!1), e.selectedOption = ko.observable("day"), e.selectedDays = ko.observableArray([]), e.selectedMonths = ko.observableArray([]), e.selectedDates = ko.observableArray([]), e.selectedHour = ko.observable("12"), e.selectedMinute = ko.observable("00"), e.selectedAmPm = ko.observable("PM"), e.days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], e.months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], e.dates = [], e.hours = [], e.minutes = ["00", "15", "30", "45"]; for (var r = 1; r <= 31; r++)e.dates.push(r); for (r = 1; r <= 12; r++)e.hours.push(r); e.hasSchedule = ko.observable(!1), e.emailTo = ko.observable(""), e.selectedOption.subscribe(function (r) { switch (e.selectedDays([]), e.selectedMonths([]), e.selectedDates([]), r) { case "day": e.showDays(!1), e.showDates(!1), e.showMonths(!1); break; case "week": e.showDays(!0), e.showDates(!1), e.showMonths(!1); break; case "month": e.showDays(!1), e.showDates(!0), e.showMonths(!1); break; case "year": e.showDays(!1), e.showDates(!0), e.showMonths(!0) } }), e.toJs = function () { return e.hasSchedule() ? { SelectedOption: e.selectedOption(), SelectedDays: e.selectedDays().join(","), SelectedMonths: e.selectedMonths().join(","), SelectedDates: e.selectedDates().join(","), SelectedHour: e.selectedHour(), SelectedMinute: e.selectedMinute(), SelectedAmPm: e.selectedAmPm(), EmailTo: e.emailTo() } : null }, e.fromJs = function (r) { e.hasSchedule(!!r), r = r || { SelectedOption: "day", SelectedDays: "", SelectedMonths: "", SelectedDates: "" }, e.selectedOption(r.SelectedOption), e.selectedDays(_.map(r.SelectedDays.split(","), function (e) { return parseInt(e) })), e.selectedMonths(_.map(r.SelectedMonths.split(","), function (e) { return parseInt(e) })), e.selectedDates(_.map(r.SelectedDates.split(","), function (e) { return parseInt(e) })), e.selectedHour(r.SelectedHour || "12"), e.selectedMinute(r.SelectedMinute || "00"), e.selectedAmPm(r.SelectedAmPm || "PM"), e.emailTo(r.EmailTo || "") }, e.clear = function () { e.fromJs(null) } } function filterGroupViewModel(e) { e = e || {}; var r = this; r.isRoot = !0 === e.isRoot, r.AndOr = ko.observable(e.AndOr || " AND "), r.Filters = ko.observableArray([]), r.FilterGroups = ko.observableArray([]), r.AddFilterGroup = function (o) { var t = new filterGroupViewModel({ parent: e.parent, AndOr: o.AndOr, options: e.options }); return r.FilterGroups.push(t), t }, r.RemoveFilterGroup = function (e) { r.FilterGroups.remove(e) }, r.AddFilter = function (o, t) { o = o || {}; var a = ko.observableArray([]); o.Value1 && a.push({ id: o.Value1, text: o.Value1 }), o.Value2 && a.push({ id: o.Value2, text: o.Value2 }); var l = ko.observable(), s = "in" == o.Operator || "not in" == o.Operator ? (o.Value1 || "").split(",") : [], n = { AndOr: ko.observable(t ? " AND " : o.AndOr), Field: l, Operator: ko.observable(o.Operator), Value: ko.observable(o.Value1), Value2: ko.observable(o.Value2), ValueIn: ko.observableArray(s), LookupList: a, Apply: ko.observable(null == o.Apply || o.Apply), IsFilterOnFly: !0 === t }; l.subscribe(function (r) { r && r.hasForeignKey && ajaxcall({ url: e.options.apiUrl, data: { method: "/ReportApi/GetLookupList", model: JSON.stringify({ fieldId: r.fieldId }) } }).done(function (r) { r.d && (r = r.d), ajaxcall({ type: "POST", url: e.options.lookupListUrl, data: JSON.stringify({ lookupSql: r.sql, connectKey: r.connectKey }) }).done(function (e) { e.d && (e = e.d), a(e), s.length > 0 && (n.ValueIn(s), s = []) }) }) }), o.FieldId && l(e.parent.FindField(o.FieldId)), n.compareTo = ko.computed(function () { return l() ? _.filter(e.parent.AdditionalSeries(), function (e) { return e.Field().fieldId == l().fieldId }) : [] }), r.Filters.push(n) }, r.RemoveFilter = function (e) { r.Filters.remove(e) } } var manageAccess = function (e) { return { clientId: ko.observable(), users: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), userRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), viewOnlyUsers: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), viewOnlyUserRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), getAsList: function (e) { var r = ""; return _.forEach(e, function (e) { e.selected() && (r += (r ? "," : "") + e.value()) }), r }, setupList: function (e, r) { _.forEach(e, function (e) { r.indexOf(e.value()) >= 0 ? e.selected(!0) : e.selected(!1) }) } } }, reportViewModel = function (e) { var r = this; (e = e || {}).userSettings = e.userSettings || {}, e.userId = e.userSettings.currentUserId || "", e.users = e.userSettings.users, e.userRoles = e.userSettings.userRoles, r.currentUserId = e.userSettings.userId, r.currentUserRole = (e.userSettings.currentUserRoles || []).join(), r.currentUserName = e.userSettings.currentUserName, r.allowAdmin = ko.observable(e.userSettings.allowAdminMode), r.ChartData = ko.observable(), r.ReportName = ko.observable(), r.ReportType = ko.observable("List"), r.ReportDescription = ko.observable(), r.FolderID = ko.observable(), r.ReportID = ko.observable(), r.Tables = ko.observableArray([]), r.SelectedTable = ko.observable(), r.ChooseFields = ko.observableArray([]), r.ChosenFields = ko.observableArray([]), r.SelectedFields = ko.observableArray([]), r.SelectFields = ko.observableArray([]), r.SelectedField = ko.observable(), r.AdditionalSeries = ko.observableArray([]), r.ReportSeries = "", r.IncludeSubTotal = ko.observable(!1), r.ShowUniqueRecords = ko.observable(!1), r.AggregateReport = ko.observable(!1), r.SortByField = ko.observable(), r.FilterGroups = ko.observableArray(), r.FilterGroups.subscribe(function (o) { o && 0 == o.length && r.FilterGroups.push(new filterGroupViewModel({ isRoot: !0, parent: r, options: e })) }), r.FilterGroups([]), r.SaveReport = ko.observable(!0), r.ShowDataWithGraph = ko.observable(!0), r.ShowOnDashboard = ko.observable(!1), r.ReportMode = ko.observable(e.reportMode || "start"), r.Folders = ko.observableArray(), r.SavedReports = ko.observableArray([]), r.SelectedFolder = ko.observable(null), r.CanSaveReports = ko.observable(!0), r.CanManageFolders = ko.observable(!0), r.CanEdit = ko.observable(!0), r.ReportResult = ko.observable({ HasError: ko.observable(!1), ReportDebug: ko.observable(!1), Exception: ko.observable(), Warnings: ko.observable(), ReportSql: ko.observable(), ReportData: ko.observable(null), SubTotals: ko.observableArray([]) }), r.pager = new pagerViewModel, r.currentSql = ko.observable(), r.currentConnectKey = ko.observable(), r.adminMode = ko.observable(!1), r.x = ko.observable(0), r.y = ko.observable(0), r.width = ko.observable(3), r.height = ko.observable(2), r.adminMode.subscribe(function (e) { r.LoadAllSavedReports(), e ? (r._cansavereports = r.CanSaveReports(), r.SaveReport(!0), r.CanSaveReports(!0)) : r.CanSaveReports(r._cansavereports), localStorage && localStorage.setItem("reportAdminMode", e) }), r.manageAccess = manageAccess(e), r.pager.currentPage.subscribe(function () { r.ExecuteReportQuery(r.currentSql(), r.currentConnectKey(), r.ReportSeries) }), r.pager.pageSize.subscribe(function () { r.ExecuteReportQuery(r.currentSql(), r.currentConnectKey(), r.ReportSeries) }), r.createNewReport = function () { r.clearReport(), r.ReportMode("generate") }, r.ReportType.subscribe(function (e) { "List" == e ? r.AggregateReport(!1) : r.AggregateReport(!0) }), r.setReportType = function (e) { r.ReportType(e) }, r.cancelCreateReport = function () { bootbox.confirm("Are you sure you would like to cancel editing this Report?", function (o) { o && (r.clearReport(), e.reportWizard.modal("hide"), r.ReportMode("start")) }) }, r.FlyFilters = ko.computed(function () { var e = []; return _.forEach(r.FilterGroups(), function (r) { _.forEach(r.Filters(), function (r) { r.IsFilterOnFly && e.push(r) }) }), e }), r.enabledFields = ko.computed(function () { return _.filter(r.SelectedFields(), function (e) { return !e.disabled() }) }), r.scheduleBuilder = new scheduleBuilder, r.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { r.ManageFolder.IsNew(!0), r.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { null != r.SelectedFolder() ? 0 != r.SelectedFolder().Id ? (r.ManageFolder.IsNew(!1), r.ManageFolder.FolderName(r.SelectedFolder().FolderName), $("#folderModal").modal("show")) : toastr.error("Cannot edit Default folder") : toastr.error("Please choose a folder first") }, saveFolder: function () { if ("" != r.ManageFolder.FolderName()) { var o = r.ManageFolder.IsNew() ? 0 : r.SelectedFolder().Id; if (0 != _.filter(r.Folders(), function (e) { return e.FolderName.toLowerCase() == r.ManageFolder.FolderName().toLowerCase() && (0 == o || 0 != o && e.Id != o) }).length) return toastr.error("Folder name is already in use, please choose a different Folder Name"), !1; ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/SaveFolder", model: JSON.stringify({ folderId: o, folderName: r.ManageFolder.FolderName() }) } }).done(function (e) { if (e.d && (e = e.d), r.ManageFolder.IsNew()) r.Folders.push({ Id: e, FolderName: r.ManageFolder.FolderName() }); else { var o = r.SelectedFolder(); r.Folders.remove(r.SelectedFolder()), o.FolderName = r.ManageFolder.FolderName(), r.Folders.push(o) } $("#folderModal").modal("hide") }) } else toastr.error("Please enter a Folder Name") }, deleteFolder: function () { null != r.SelectedFolder() ? 0 != r.SelectedFolder().Id ? bootbox.confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports and this action cannot be undone.", function (o) { o && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteFolder", model: JSON.stringify({ folderId: r.SelectedFolder().Id }) } }).done(function () { r.Folders.remove(r.SelectedFolder()), r.SelectedFolder(null) }) }) : toastr.error("Cannot delete Default folder") : toastr.error("Please choose a folder first") } }, r.reportsInFolder = ko.computed(function () { return null == r.SelectedFolder() ? [] : _.filter(r.SavedReports(), function (e) { return e.folderId == r.SelectedFolder().Id }) }), r.clearReport = function () { r.ReportName(""), r.ReportDescription(""), r.ReportType("List"), r.FolderID(null == r.SelectedFolder() ? 0 : r.SelectedFolder().Id), r.ChosenFields([]), r.SelectedFields([]), r.SelectFields([]), r.SelectedField(null), r.IncludeSubTotal(!1), r.ShowUniqueRecords(!1), r.AggregateReport(!1), r.SortByField(null), r.FilterGroups([]), r.ReportID(0), r.SaveReport(r.CanSaveReports()), r.scheduleBuilder.clear() }, r.SelectedTable.subscribe(function (o) { null != o ? ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFields", model: JSON.stringify({ tableId: o.tableId, includeDoNotDisplay: !1 }) } }).done(function (e) { e.d && (e = e.d); var t = _.map(e, function (e, t) { var a = _.filter(r.SelectedFields(), function (r) { return r.fieldId == e.fieldId }); return a.length > 0 ? a[0] : (e.tableName = o.tableName, r.setupField(e)) }); r.ChooseFields(t) }) : r.ChooseFields([]) }), r.MoveChosenFields = function () { _.forEach(r.ChosenFields(), function (e) { _.filter(r.SelectedFields(), function (r) { return r.fieldId == e.fieldId }).length > 0 ? toastr.error(e.fieldName + " is already Selected") : r.SelectedFields.push(e) }) }, r.MoveAllFields = function () { _.forEach(r.ChooseFields(), function (e) { 0 === _.filter(r.SelectedFields(), function (r) { return r.fieldId == e.fieldId }).length && r.SelectedFields.push(e) }) }, r.RemoveSelectedFields = function () { _.forEach(r.ChooseFields(), function (e) { r.SelectedFields.remove(e) }) }, r.isFormulaField = ko.observable(!1), r.formulaFields = ko.observableArray([]), r.formulaFieldLabel = ko.observable(""), r.formulaDataFormat = ko.observable(""), r.formulaOnlyHasDateFields = ko.computed(function () { var e = r.formulaFields(); if (e.length <= 0) return !1; var o = !0; return _.forEach(e, function (e) { if (!e.setupFormula.isParenthesesStart() && !e.setupFormula.isParenthesesEnd() && !e.setupFormula.isConstantValue() && e.fieldType && e.fieldType.indexOf("Date") < 0) return o = !1, !1 }), o }), r.getEmptyFormulaField = function () { return { tableName: "Custom", fieldName: r.formulaFieldLabel() || "Custom", fieldFormat: r.formulaDataFormat() || "String", fieldType: "Custom", aggregateFunction: "", filterOnFly: !1, disabled: !1, groupInGraph: !1, hideInDetail: !1, fieldAggregate: ["Group", "Count"], fieldAggregateWithDrilldown: ["Group", "Count"], isFormulaField: !0, hasForeignKey: !1, fieldFilter: ["=", "<>", ">=", ">", "<", "<="], formulaItems: r.formulaFields() } }, r.selectedFieldsCanFilter = ko.computed(function () { return _.filter(r.SelectedFields(), function (e) { return !e.isFormulaField() }) }), r.clearFormulaField = function () { r.formulaFields([]), r.formulaFieldLabel(""), r.formulaDataFormat("String") }, r.isFormulaField.subscribe(function () { r.clearFormulaField() }), r.saveFormulaField = function () { if (0 != r.formulaFields().length) if (r.validateReport()) { var e = r.getEmptyFormulaField(); r.SelectedFields.push(r.setupField(e)), r.clearFormulaField(), r.isFormulaField(!1) } else toastr.error("Please correct validation issues"); else toastr.error("Please select some items for the Custom Field") }, r.showFormulaOperation = function (e) { var o = r.formulaFields().length; return !(o <= 1 || e == o - 1) && (!r.formulaFields()[e + 1].setupFormula.isParenthesesEnd() && !r.formulaFields()[e].setupFormula.isParenthesesStart()) }, r.addFormulaParentheses = function () { if (!(r.formulaFields().length <= 0 || r.formulaFields()[0].setupFormula.isParenthesesStart() && r.formulaFields()[r.formulaFields().length - 1].setupFormula.isParenthesesEnd())) { var e = r.getEmptyFormulaField(), o = r.setupField(Object.assign({}, e)), t = r.setupField(Object.assign({}, e)); o.setupFormula.isParenthesesStart(!0), t.setupFormula.isParenthesesEnd(!0), r.formulaFields.splice(0, 0, o), r.formulaFields.push(t) } }, r.addFormulaConstantValue = function () { var e = r.getEmptyFormulaField(), o = r.setupField(Object.assign({}, e)); o.setupFormula.isConstantValue(!0), r.formulaFields.push(o) }, r.isFieldValidForYAxis = function (e, o) { return !(e > 0 && "Bar" == r.ReportType() && ["Int", "Double", "Money"].indexOf(o) < 0) }, r.isChart = ko.computed(function () { return ["List", "Summary"].indexOf(r.ReportType()) < 0 }), r.isFieldValidForSubGroup = function (e, r) { return !(e > 0 && ["Int", "Double", "Money"].indexOf(r) < 0) }, r.canDrilldown = ko.computed(function () { return ["List"].indexOf(r.ReportType()) < 0 }), r.dateFields = ko.computed(function () { return _.filter(r.SelectedFields(), function (e) { return "DateTime" == e.fieldType }) }), r.TotalSeries = ko.observable(0), r.AllSqlQuries = ko.observable(""), r.canAddSeries = ko.computed(function () { var e = r.dateFields().length > 0 && ["Group", "Bar", "Line"].indexOf(r.ReportType()) >= 0 && "DateTime" == r.SelectedFields()[0].fieldType, o = _.filter(r.FilterGroups(), function (e) { return _.filter(e.Filters(), function (e) { return "range" == e.Operator() && e.Value() && 0 == e.Value().indexOf("This") }).length > 0 }).length > 0; return e && o }), r.canAddSeries.subscribe(function (e) { e || r.AdditionalSeries([]) }), r.AddSeries = function (e) { e = e || {}; var o = ko.observable(); e.Field ? o(r.FindField(e.Field().fieldId)) : o(r.dateFields()[0]); var t = ko.observableArray([]); function a(e) { t("This Year" === e ? ["Last Year", "2 Years ago", "3 Years ago", "4 Years ago", "5 Years ago"] : "This Month" === e ? ["Last Month", "2 Months ago", "3 Months ago", "4 Months ago", "5 Months ago"] : "This Week" === e ? ["Last Week", "2 Weeks ago", "3 Weeks ago", "4 Weeks ago", "5 Weeks ago"] : []) } _.forEach(r.FilterGroups(), function (e) { _.forEach(e.Filters(), function (e) { if (e.Field().FieldId == o().FieldId) return a(e.Value()), e.Value.subscribe(function (e) { a(e) }), !1 }) }), r.AdditionalSeries.push({ Field: o, Operator: ko.observable("Range"), Value: ko.observable(e.Value), Range: t }) }, r.canMoveUp = function () { return 1 == r.SelectFields().length && r.SelectedFields.indexOf(r.SelectFields()[0]) >= 1 }, r.canMoveDown = function () { return 1 == r.SelectFields().length && r.SelectedFields.indexOf(r.SelectFields()[0]) < r.SelectedFields().length - 1 }, r.MoveUp = function () { if (r.canMoveUp()) { var e = r.SelectFields()[0], o = r.SelectedFields.indexOf(e); if (o >= 1) { var t = r.SelectedFields(); r.SelectedFields.splice(o - 1, 2, t[o], t[o - 1]) } } }, r.MoveDown = function () { if (r.canMoveDown()) { var e = r.SelectFields()[0], o = r.SelectedFields.indexOf(e), t = r.SelectedFields(); o < t.length - 1 && r.SelectedFields.splice(o, 2, t[o + 1], t[o]) } }, r.RemoveField = function (e) { r.SelectedFields.remove(e) }, r.RemoveSeries = function (e) { r.AdditionalSeries.remove(e) }, r.FindField = function (e) { return _.filter(r.SelectedFields(), function (r) { return r.fieldId == e })[0] }, r.SaveWithoutRun = function () { r.RunReport(!0) }, r.BuildFilterData = function (e) { var o = []; return _.forEach(e, function (e) { var t = []; _.forEach(e.Filters(), function (o, a) { var l = o.Apply() && o.IsFilterOnFly || !o.IsFilterOnFly ? { SavedReportId: r.ReportID(), FieldId: o.Field().fieldId, AndOr: 0 == a ? e.AndOr() : o.AndOr(), Operator: o.Operator(), Value1: "in" == o.Operator() || "not in" == o.Operator() ? o.ValueIn().join(",") : o.Operator().indexOf("blank") >= 0 ? "blank" : o.Value(), Value2: o.Value2(), Filters: 0 == a ? r.BuildFilterData(e.FilterGroups()) : [] } : null; null == l || l.Value1 || l.Value2 || (l = null), l && t.push(l) }), o.push({ SavedReportId: r.ReportID(), isRoot: e.isRoot, AndOr: e.AndOr(), Filters: t }) }), o }, r.SeriesDataIntoFilter = function (e, o) { var t = []; return _.forEach(e, function (e) { var a = []; a.push(r.AdditionalSeries()[o]); var l = []; _.forEach(a, function (o, t) { var a = { SavedReportId: r.ReportID(), FieldId: o.Field().fieldId, AndOr: "AND", Operator: o.Operator().toLowerCase(), Value1: "in" == o.Operator() || "not in" == o.Operator() ? o.ValueIn().join(",") : o.Operator().indexOf("blank") >= 0 ? "blank" : o.Value(), Filters: 0 == t ? r.BuildFilterData(e.FilterGroups()) : [] }; null == a || a.Value1 || a.Value2 || (a = null), a && l.push(a) }), t.push({ SavedReportId: r.ReportID(), isRoot: e.isRoot, AndOr: e.AndOr(), Filters: l }) }), t }, r.BuildReportData = function (o, t, a) { o = o || []; var l = t ? r.SeriesDataIntoFilter(r.FilterGroups(), a) : r.BuildFilterData(r.FilterGroups()); return { ReportID: r.ReportID(), ReportName: r.ReportName(), ReportDescription: r.ReportDescription(), FolderID: r.FolderID(), SelectedFieldIDs: _.map(r.SelectedFields(), function (e) { return e.fieldId }), Filters: l, Series: _.map(r.AdditionalSeries(), function (e, o) { return { SavedReportId: r.ReportID(), FieldId: e.Field().fieldId, Operator: e.Operator(), Value: e.Value() } }), IncludeSubTotals: r.IncludeSubTotal(), ShowUniqueRecords: r.ShowUniqueRecords(), IsAggregateReport: !(o.length > 0) && r.AggregateReport(), ShowDataWithGraph: r.ShowDataWithGraph(), ShowOnDashboard: r.ShowOnDashboard(), SortBy: r.SortByField(), ReportType: r.ReportType(), GroupFunctionList: _.map(r.SelectedFields(), function (e) { return { FieldID: e.fieldId, GroupFunc: e.selectedAggregate(), FilterOnFly: e.filterOnFly(), Disabled: e.disabled(), GroupInGraph: e.groupInGraph(), HideInDetail: e.hideInDetail(), IsCustom: e.isFormulaField(), CustomLabel: e.fieldName, DataFormat: e.fieldFormat, CustomFieldDetails: _.map(e.formulaItems(), function (e) { return { FieldId: e.fieldId(), IsParenthesesStart: e.isParenthesesStart() || !1, IsParenthesesEnd: e.isParenthesesEnd() || !1, Operation: e.formulaOperation(), ConstantValue: e.constantValue() } }) } }), Schedule: r.scheduleBuilder.toJs(), DrillDownRow: o, UserId: r.manageAccess.getAsList(r.manageAccess.users), ViewOnlyUserId: r.manageAccess.getAsList(r.manageAccess.viewOnlyUsers), UserRoles: r.manageAccess.getAsList(r.manageAccess.userRoles), ViewOnlyUserRoles: r.manageAccess.getAsList(r.manageAccess.viewOnlyUserRoles), DataFilters: e.dataFilters } }, r.RunReport = function (o) { if (o = !0 === o, r.TotalSeries(r.AdditionalSeries().length), !r.validateReport()) return void toastr.error("Please correct validation issues"); let t = 0, a = !1, l = !1, s = null, n = r.AdditionalSeries().length; do { t > 0 && (a = !0, r.CanSaveReports(!1)), ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!r.CanSaveReports() && r.SaveReport(), ReportJson: JSON.stringify(r.BuildReportData([], a, t - 1)), adminMode: r.adminMode() }), async: !1 }).done(function (e) { s = e, r.AllSqlQuries(r.AllSqlQuries() + (e.sql + ",")), e.d && (e = e.d), r.ReportID(e.reportId), r.SaveReport() && o && 0 === n && (toastr.success("Report Saved"), r.LoadAllSavedReports()), o || "execute" != r.ReportMode() && "dashboard" != r.ReportMode() || (l = !0, r.ExecuteReportQuery(e.sql, e.connectKey, r.ReportSeries)) }), t++ } while (t < n + 1); !1 === l && (o && toastr.success("Report Saved"), redirectToReport(e.runReportUrl, { reportId: s.reportId, reportName: r.ReportName(), reportDescription: r.ReportDescription(), includeSubTotal: r.IncludeSubTotal(), showUniqueRecords: r.ShowUniqueRecords(), aggregateReport: r.AggregateReport(), showDataWithGraph: r.ShowDataWithGraph(), reportSql: r.AllSqlQuries(), connectKey: s.connectKey, reportFilter: JSON.stringify(_.map(r.FlyFilters(), function (e) { return ko.toJS(e) })), reportType: r.ReportType(), selectedFolder: null != r.SelectedFolder() ? r.SelectedFolder().Id : 0, reportSeries: _.map(r.AdditionalSeries(), function (e, r) { return e.Value() }) })) }, r.ExecuteReportQuery = function (o, t, a) { if (o && t) return ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: o, connectKey: t, reportType: r.ReportType(), pageNumber: r.pager.currentPage(), pageSize: r.pager.pageSize(), sortBy: r.pager.sortColumn() || "", desc: r.pager.sortDescending() || !1, ReportSeries: a }) }).done(function (l) { l.d && (l = l.d); var s = r.ReportResult(); s.HasError(l.HasError), s.Exception(l.Exception), s.Warnings(l.Warnings), s.ReportDebug(l.ReportDebug), s.ReportSql(l.ReportSql), r.ReportSeries = a, l.ReportData.IsDrillDown = ko.observable(!1), _.forEach(l.ReportData.Rows, function (o) { o.DrillDownData = ko.observable(null), o.pager = new pagerViewModel({ pageSize: 10 }), o.sql = "", o.connectKey = "", o.changeSort = function (e) { return o.pager.changeSort(e), o.execute(), !1 }, o.isExpanded = ko.observable(!1), o.execute = function () { "" != o.sql && ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: o.sql, connectKey: o.connectKey, reportType: "List", pageNumber: o.pager.currentPage(), pageSize: o.pager.pageSize(), sortBy: o.pager.sortColumn() || "", desc: o.pager.sortDescending() || !1, ReportSeries: a }) }).done(function (e) { e.d && (e = e.d), e.ReportData.IsDrillDown = ko.observable(!0), o.DrillDownData(e.ReportData), o.pager.totalRecords(e.Pager.TotalRecords), o.pager.pages(e.Pager.TotalPages) }) }, o.expand = function () { ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunDrillDownReport", SaveReport: !1, ReportJson: JSON.stringify(r.BuildReportData(o.Items)), adminMode: r.adminMode() }) }).done(function (e) { e.d && (e = e.d), o.sql = e.sql, o.connectKey = e.connectKey, o.execute() }), o.isExpanded(!0) }, o.pager.currentPage.subscribe(function () { o.execute() }), o.collapse = function () { o.isExpanded(!1) }, o.toggle = function () { o.isExpanded() ? o.collapse() : o.expand() } }), s.ReportData(l.ReportData), r.pager.totalRecords(l.Pager.TotalRecords), r.pager.pages(l.Pager.TotalPages), r.currentSql(o), r.currentConnectKey(t), l.Warnings && toastr.info("Note: " + l.Warnings), r.isChart() && (google.charts.load("current", { packages: ["corechart"] }), google.charts.setOnLoadCallback(r.DrawChart)), r.IncludeSubTotal() && ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!r.CanSaveReports() && r.SaveReport(), ReportJson: JSON.stringify(r.BuildReportData()), adminMode: r.adminMode(), SubTotalMode: !0 }) }).done(function (o) { o.d && (o = o.d), ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: o.sql, connectKey: o.connectKey, reportType: r.ReportType(), pageNumber: 1, pageSize: 1, sortBy: "", desc: !1 }) }).done(function (e) { e.d && (e = e.d), r.ReportResult().SubTotals(e.ReportData.Rows) }) }) }) }, r.ExpandAll = function () { _.forEach(r.ReportResult().ReportData().Rows, function (e) { e.expand() }) }, r.CollapseAll = function () { _.forEach(r.ReportResult().ReportData().Rows, function (e) { e.collapse() }) }, r.DrawChart = function () { if (r.isChart()) { var e = r.ReportResult().ReportData(), o = new google.visualization.DataTable, t = [], a = []; _.forEach(e.Columns, function (e, l) { var s = r.SelectedFields()[l]; 0 == l ? o.addColumn(e.IsNumeric ? "number" : "string", e.ColumnName) : void 0 !== s && s.groupInGraph() ? t.push({ index: l, column: e.ColumnName }) : e.IsNumeric && a.push({ index: l, column: e.ColumnName }) }), 0 == t.length && _.forEach(e.Columns, function (e, r) { r > 0 && e.IsNumeric && o.addColumn(e.IsNumeric ? "number" : "string", e.ColumnName) }); var l = [], s = []; _.forEach(e.Rows, function (e) { var r = []; _.forEach(e.Items, function (e, n) { if (0 == n) t.length > 0 && (r = _.filter(l, function (r) { return r[0] == e.Value })).length > 0 ? (l = l.filter(function (r) { return r[0] != e.Value }), r = r[0]) : r.push((e.Column.IsNumeric ? parseInt(e.Value) : e.Value) || (e.Column.IsNumeric ? 0 : "")); else if (t.length > 0) { 1 == _.filter(t, function (e) { return e.index == n }).length ? 0 == _.filter(s, function (r) { return r == e.Value }).length && (s.push(e.Value || ""), _.forEach(a, function (r) { o.addColumn("number", e.Value + (0 == r ? "" : "-" + r)) })) : e.Column.IsNumeric && r.push((e.Column.IsNumeric ? parseInt(e.Value) : e.Value) || (e.Column.IsNumeric ? 0 : "")) } else e.Column.IsNumeric && r.push((e.Column.IsNumeric ? parseInt(e.Value) : e.Value) || (e.Column.IsNumeric ? 0 : "")) }), l.push(r) }), _.forEach(l, function (e) { if (e.length != o.getNumberOfColumns()) for (var r = 0; r <= o.getNumberOfColumns() - e.length; r++)e.push(0) }), o.addRows(l); var n = { title: r.ReportName(), animation: { startup: !0, duration: 1e3, easing: "out" } }, i = document.getElementById("chart_div_" + r.ReportID()), d = null; "Pie" == r.ReportType() && (d = new google.visualization.PieChart(i)), "Bar" == r.ReportType() && (d = new google.visualization.ColumnChart(i)), "Line" == r.ReportType() && (d = new google.visualization.LineChart(i)), "Map" == r.ReportType() && (d = new google.visualization.GeoChart(i)), d.draw(o, n), r.ChartData(d.getImageURI()) } }, r.loadFolders = function (o) { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done(function (e) { if (e.d && (e = e.d), r.Folders(e), r.SelectedFolder(null), o) { var t = _.filter(e, function (e) { return e.Id == o }); t.length > 0 && r.SelectedFolder(t[0]) } }) }, r.setupField = function (e) { e.selectedFieldName = e.tableName + " > " + e.fieldName, e.selectedAggregate = ko.observable(e.aggregateFunction), e.filterOnFly = ko.observable(e.filterOnFly), e.disabled = ko.observable(e.disabled), e.groupInGraph = ko.observable(e.groupInGraph), e.hideInDetail = ko.observable(e.hideInDetail), e.fieldAggregateWithDrilldown = e.fieldAggregate.concat("Only in Detail"), e.isFormulaField = ko.observable(e.isFormulaField); var r = []; return _.forEach(e.formulaItems || [], function (e) { r.push(new formulaFieldViewModel({ fieldId: e.fieldId || 0, isParenthesesStart: e.setupFormula ? e.setupFormula.isParenthesesStart() : e.isParenthesesStart, isParenthesesEnd: e.setupFormula ? e.setupFormula.isParenthesesEnd() : e.isParenthesesEnd, formulaOperation: e.setupFormula ? e.setupFormula.formulaOperation() : e.formulaOperation, constantValue: e.setupFormula ? e.setupFormula.constantValue() : e.constantValue })) }), e.formulaItems = ko.observableArray(r), e.setupFormula = new formulaFieldViewModel, e }, r.LoadReport = function (o, t, a) { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: o, adminMode: r.adminMode() }) } }).done(function (o) { o.d && (o = o.d), r.ReportID(o.ReportID), r.ReportType(o.ReportType), r.ReportName(o.ReportName), r.ReportDescription(o.ReportDescription), r.FolderID(o.FolderID), _.forEach(o.SelectedFields, function (e) { e = r.setupField(e) }), r.SelectedFields(o.SelectedFields), r.ChosenFields([]), r.SelectFields([]), r.SelectedField(null), r.manageAccess.setupList(r.manageAccess.users, o.UserId || ""), r.manageAccess.setupList(r.manageAccess.userRoles, o.UserRoles || ""), r.manageAccess.setupList(r.manageAccess.viewOnlyUserRoles, o.ViewOnlyUserRoles || ""), r.manageAccess.setupList(r.manageAccess.viewOnlyUsers, o.ViewOnlyUserId || ""), r.IncludeSubTotal(o.IncludeSubTotals), r.ShowUniqueRecords(o.ShowUniqueRecords), r.AggregateReport(o.IsAggregateReport), r.ShowDataWithGraph(o.ShowDataWithGraph), r.ShowOnDashboard(o.ShowOnDashboard), r.SortByField(o.SortBy), r.CanEdit((!e.clientId || o.ClientId == e.clientId) && (!e.userId || o.UserId == e.userId) || r.adminMode()), r.FilterGroups([]), r.AdditionalSeries([]), r.scheduleBuilder.fromJs(o.Schedule); var l = []; function s(e, o) { e && 0 != e.length && _.forEach(e, function (e) { if (e.FieldId) { if (l.indexOf(e.FieldId) < 0) { var t = _.filter(r.SelectedFields(), function (r) { return 1 == r.filterOnFly() && r.fieldId == e.FieldId }).length > 0; t && l.push({ fieldId: e.FieldId }), null == o && (o = r.FilterGroups()[0]), o.AddFilter(e, t) } } else o = null == o ? r.FilterGroups()[0] : o.AddFilterGroup({ AndOr: e.AndOr }); s(e.Filters, o) }) } if (1 == t) { if (e.reportFilter && "[]" != e.reportFilter) { var n = JSON.parse(e.reportFilter); _.forEach(n, function (e) { var o = _.filter(l, function (r) { return r.fieldId == e.Field.fieldId }); o.length > 0 && (e.FieldId = e.Field.fieldId, e.Value1 = e.Value, l.push(o[0]), r.FilterGroups()[0].AddFilter(e, !0)) }) } s(o.Filters) } else s(o.Filters); _.forEach(o.Series, function (e) { r.AddSeries(e) }), r.SaveReport(!t && r.CanEdit()), "execute" != r.ReportMode() && "dashboard" != r.ReportMode() || r.ExecuteReportQuery(e.reportSql, e.reportConnect, a) }) }, r.LoadAllSavedReports = function () { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done(function (o) { o.d && (o = o.d), _.forEach(o, function (o) { o.runMode = !1, o.openReport = function () { return r.LoadReport(o.reportId).done(function () { o.runMode ? (r.SaveReport(!1), r.RunReport(), o.runMode = !1) : r.ReportMode("generate") }) }, o.copyReport = function () { o.openReport().done(function () { r.ReportID(0), r.ReportName("Copy of " + r.ReportName()), r.CanEdit(!0), r.SaveReport(!0) }) }, o.runReport = function () { o.runMode = !0, o.openReport() }, o.deleteReport = function () { bootbox.confirm("Are you sure you would like to Delete this Report?", function (t) { t && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteReport", model: JSON.stringify({ reportId: o.reportId }) } }).done(function () { r.SavedReports.remove(o) }) }) }, e.reportId > 0 && o.reportId == e.reportId && (o.openReport(), e.reportWizard.modal("show")) }), r.SavedReports(o) }) }, "dashboard" != r.ReportMode() && (r.LoadAllSavedReports(), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/CanSaveReports", model: "{}" } }).done(function (e) { e.d && (e = e.d), e = e || { allowUsersToCreateReports: !0, allowUsersToManageFolders: !0 }, r.CanSaveReports(e.allowUsersToCreateReports), r.CanManageFolders(e.allowUsersToManageFolders) })), r.changeSort = function (e) { return r.pager.changeSort(e), r.ExecuteReportQuery(r.currentSql(), r.currentConnectKey(), r.ReportSeries), !1 }, r.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, r.validateReport = function () { if (null != e.reportWizard) { var o = e.reportWizard.find("input,select"), t = !0; $(".form-group").removeClass("has-error"); for (var a = 0; a < o.length; a++)r.isInputValid(o[a]) || (t = !1, $(o[a]).closest(".form-group").addClass("has-error")); return t } }, r.loadTables = function () { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetTables", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done(function (e) { e.d && (e = e.d), r.Tables(e) }) }, r.init = function (e, o) { if (o) $("#noaccountModal").modal("show"); else { r.loadFolders(e), r.loadTables(); var t = !1; localStorage && (t = localStorage.getItem("reportAdminMode")), "true" === t && r.adminMode(!0) } } }, dashboardViewModel = function (e) { var r = this; r.dashboards = ko.observableArray(e.dashboards || []), r.adminMode = ko.observable(!1), r.currentUserId = e.userId, r.currentUserRole = (e.currentUserRole || []).join(), r.reportsAndFolders = ko.observableArray([]), r.allowAdmin = ko.observable(e.allowAdmin); var o = e.dashboardId > 0 ? _.find(r.dashboards(), { id: e.dashboardId }) || { name: "", description: "" } : r.dashboards().length > 0 ? r.dashboards()[0] : { name: "", description: "" }; r.dashboard = { Id: ko.observable(o.id), Name: ko.observable(o.name), Description: ko.observable(o.description), manageAccess: manageAccess(e) }, r.currentDashboard = ko.observable(o), r.selectDashboard = ko.observable(o.id), r.selectDashboard.subscribe(function (e) { e != r.currentDashboard().id && (window.location = window.location.href.split("?")[0] + "?id=" + e) }), r.newDashboard = function () { r.dashboard.Id(0), r.dashboard.Name(""), r.dashboard.Description(""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.users, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.userRoles, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUserRoles, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUsers, ""), _.forEach(r.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected(!1) }) }) }, r.editDashboard = function () { r.dashboard.Id(r.currentDashboard().id), r.dashboard.Name(r.currentDashboard().name), r.dashboard.Description(r.currentDashboard().description), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.users, r.currentDashboard().userId || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.userRoles, r.currentDashboard().userRoles || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUserRoles, r.currentDashboard().viewOnlyUserRoles || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUsers, r.currentDashboard().viewOnlyUserId || ""); var e = (r.currentDashboard().selectedReports || "").split(","); _.forEach(r.reportsAndFolders(), function (r) { _.forEach(r.reports, function (r) { r.selected(e.indexOf(r.reportId.toString()) >= 0) }) }) }, r.saveDashboard = function () { if ($(".form-group").removeClass("has-error"), !r.dashboard.Name()) return $("#add-dash-name").closest(".form-group").addClass("has-error"), !1; var o = ""; _.forEach(r.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected() && (o += (o ? "," : "") + e.reportId) }) }); var t = { id: r.dashboard.Id() || 0, name: r.dashboard.Name(), description: r.dashboard.Description(), selectedReports: o, userIdAccess: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.users), viewOnlyUserId: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.viewOnlyUsers), userRolesAccess: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.userRoles), viewOnlyUserRoles: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.viewOnlyUserRoles), adminMode: r.adminMode() }; return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/SaveDashboard", model: JSON.stringify(t) } }).done(function (e) { e.d && (e = e.d), toastr.success("Dashboard saved successfully"), setTimeout(function () { window.location = window.location.href.split("?")[0] + "?id=" + e.id }, 500) }), !0 }, r.deleteDashboard = function () { bootbox.confirm("Are you sure you would like to Delete this Dashboard?", function (o) { o && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteDashboard", model: JSON.stringify({ id: r.currentDashboard().id, adminMode: r.adminMode() }) } }).done(function (e) { toastr.success("Dashboard deleted successfully"), setTimeout(function () { window.location = window.location.href.split("?")[0] }, 500) }) }) }, r.reports = ko.observableArray([]); var t = 0; _.forEach(e.reports, function (o) { var a = new reportViewModel({ runReportUrl: e.runReportUrl, execReportUrl: e.execReportUrl, reportWizard: e.reportWizard, lookupListUrl: e.lookupListUrl, runReportApiUrl: e.runReportApiUrl, apiUrl: e.apiUrl, reportFilter: o.reportFilter, reportMode: "dashboard", reportSql: o.reportSql, reportId: o.reportId, reportConnect: o.connectKey, users: e.users, userRoles: e.userRoles }); a.x = ko.observable(o.x), a.y = ko.observable(o.y), a.width = ko.observable(o.width), a.height = ko.observable(o.height), a.panelStyle = "panel-" + (0 == t ? "default" : 1 == t ? "info" : 2 == t ? "warning" : "danger"), t = 3 == t ? 0 : t + 1, r.reports.push(a), a.LoadReport(o.reportId, !0), a.showFlyFilters = ko.observable(!1), a.toggleFlyFilters = function () { a.showFlyFilters(!a.showFlyFilters()) } }), r.drawChart = function () { _.forEach(r.reports(), function (e) { e.DrawChart() }) }, r.updatePosition = function (o) { ajaxcall({ url: e.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateDashboardReportPosition", model: JSON.stringify({ x: o.x, y: o.y, width: o.width, height: o.height, dashboardId: r.currentDashboard().id, reportId: o.id }) } }) }, r.init = function () { return $.when(ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: r.adminMode() }) } }), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: r.adminMode() }) } })).done(function (e, o) { var t = []; o[0].d && (o[0] = o[0].d), e[0].d && (e[0] = e[0].d), _.forEach(o[0], function (r) { var o = _.filter(e[0], { folderId: r.Id }); t.push({ folderId: r.Id, folder: r.FolderName, reports: _.map(o, function (e) { return { reportId: e.reportId, reportName: e.reportName, reportDescription: e.reportDescription, reportType: e.reportType, selected: ko.observable(!1) } }) }) }), r.reportsAndFolders(t) }) }, r.adminMode.subscribe(function (e) { r.init() }) };